{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dan's GPT-3 Demos This site contains demos for GPT-3 using python. You can use the nav bar to the left to navigate to different sections of the demos.","title":"Home"},{"location":"#dans-gpt-3-demos","text":"This site contains demos for GPT-3 using python. You can use the nav bar to the left to navigate to different sections of the demos.","title":"Dan's GPT-3 Demos"},{"location":"api-key/","text":"OpenAI API Key Setup You can get your keys here: https://beta.openai.com/account/api-keys UNIX Environment Variable Method You can set the environment variable 1 export OPENAI_API_KEY = <API-KEY> In your .bash_profile or similar shell startup. Verify by typing: 1 echo $OPENAI_API_KEY Test your key After you install the openapi conda environment you should then have an openai command in your path: 1 $ which openai Using the lowest cost engine: ada 1 openai api completions.create -e ada -p \"The quick brown fox\" -M 5 --stream Which returned this for me: 1 The quick brown fox made many choices that we ( gpt ) Error: No API key provided. (HINT: set your API key using in code using \"openai.api_key = \", or you can set the environment variable OPENAI_API_KEY= ). You can generate API keys in the OpenAI web interface. See https://onboard.openai.com for details, or email support@openai.com if you have any questions. openai api completions.create -e ada -p \"This is a test\" -M 5 --stream","title":"OpenAI API Key Setup"},{"location":"api-key/#openai-api-key-setup","text":"","title":"OpenAI API Key Setup"},{"location":"api-key/#you-can-get-your-keys-here","text":"https://beta.openai.com/account/api-keys","title":"You can get your keys here:"},{"location":"api-key/#unix-environment-variable-method","text":"You can set the environment variable 1 export OPENAI_API_KEY = <API-KEY> In your .bash_profile or similar shell startup. Verify by typing: 1 echo $OPENAI_API_KEY","title":"UNIX Environment Variable Method"},{"location":"api-key/#test-your-key","text":"After you install the openapi conda environment you should then have an openai command in your path: 1 $ which openai Using the lowest cost engine: ada 1 openai api completions.create -e ada -p \"The quick brown fox\" -M 5 --stream Which returned this for me: 1 The quick brown fox made many choices that we ( gpt ) Error: No API key provided. (HINT: set your API key using in code using \"openai.api_key = \", or you can set the environment variable OPENAI_API_KEY= ). You can generate API keys in the OpenAI web interface. See https://onboard.openai.com for details, or email support@openai.com if you have any questions. openai api completions.create -e ada -p \"This is a test\" -M 5 --stream","title":"Test your key"},{"location":"background/","text":"GPT-3 Demos Background GPT-3 is one of the most exciting developments in AI in the last ten years. It is the first AI system to show signals of generalized intelligence. Although it is far from perfect, it is very useful to learn about the limits of what a 175 billion parameter model can do. From the paper: https://arxiv.org/abs/2005.14165 | Model Name | nparams | nlayers | dmodel | nheads | dhead | Batch Size Learning Rate | ---------- | ---- | -- | -- | -- | -- | -- | -- | |GPT-3 Small | 25M |12 |768 12 64 0.5M 6.0 \u00d7 10\u22124 |GPT-3 Medium | 350M |24 |1024 16 64 0.5M 3.0 \u00d7 10\u22124 |GPT-3 Large | 760M |24 |1536 16 96 0.5M 2.5 \u00d7 10\u22124 |GPT-3 XL | 1.3B |24 |2048 24 128 1M 2.0 \u00d7 10\u22124 |GPT-3 2.7B | 2.7B |32 |2560 32 80 1M 1.6 \u00d7 10\u22124 |GPT-3 6.7B | 6.7B |32 |4096 32 128 2M 1.2 \u00d7 10\u22124 |GPT-3 13B | 13.0B |40 5|140 40 128 2M 1.0 \u00d7 10\u22124 |GPT-3 175B | 175.0B |96 |12288 96 128 3.2M 0.6 \u00d7 10\u22124","title":"Background"},{"location":"background/#gpt-3-demos-background","text":"GPT-3 is one of the most exciting developments in AI in the last ten years. It is the first AI system to show signals of generalized intelligence. Although it is far from perfect, it is very useful to learn about the limits of what a 175 billion parameter model can do. From the paper: https://arxiv.org/abs/2005.14165 | Model Name | nparams | nlayers | dmodel | nheads | dhead | Batch Size Learning Rate | ---------- | ---- | -- | -- | -- | -- | -- | -- | |GPT-3 Small | 25M |12 |768 12 64 0.5M 6.0 \u00d7 10\u22124 |GPT-3 Medium | 350M |24 |1024 16 64 0.5M 3.0 \u00d7 10\u22124 |GPT-3 Large | 760M |24 |1536 16 96 0.5M 2.5 \u00d7 10\u22124 |GPT-3 XL | 1.3B |24 |2048 24 128 1M 2.0 \u00d7 10\u22124 |GPT-3 2.7B | 2.7B |32 |2560 32 80 1M 1.6 \u00d7 10\u22124 |GPT-3 6.7B | 6.7B |32 |4096 32 128 2M 1.2 \u00d7 10\u22124 |GPT-3 13B | 13.0B |40 5|140 40 128 2M 1.0 \u00d7 10\u22124 |GPT-3 175B | 175.0B |96 |12288 96 128 3.2M 0.6 \u00d7 10\u22124","title":"GPT-3 Demos Background"},{"location":"conda/","text":"How to Create a GPT-3 Conda Environment 1 conda create -n gpt python = 3 pip-20.2.4 1 conda activate gpt Prompt is now: (gpt) mac:~$ 1 brew install yarn openai api completions.create -e ada -p \"This is a test\" -M 5 --stream","title":"How to Create a GPT-3 Conda Environment"},{"location":"conda/#how-to-create-a-gpt-3-conda-environment","text":"1 conda create -n gpt python = 3 pip-20.2.4 1 conda activate gpt Prompt is now: (gpt) mac:~$ 1 brew install yarn openai api completions.create -e ada -p \"This is a test\" -M 5 --stream","title":"How to Create a GPT-3 Conda Environment"},{"location":"contacts/","text":"Contacts Dan McCreary","title":"Contacts"},{"location":"contacts/#contacts","text":"Dan McCreary","title":"Contacts"},{"location":"costs/","text":"GPT-3 Cost Models The prices have been updated as of December 1st, 2020 Engine Cost / 1K Tokens Davinci $0.06 Curie $0.006 Babbage $0.0012 Ada $0.0008 Note that Curie is 1/10th the price per token as Davinci.","title":"GPT-3 Cost Models"},{"location":"costs/#gpt-3-cost-models","text":"The prices have been updated as of December 1st, 2020 Engine Cost / 1K Tokens Davinci $0.06 Curie $0.006 Babbage $0.0012 Ada $0.0008 Note that Curie is 1/10th the price per token as Davinci.","title":"GPT-3 Cost Models"},{"location":"examples-01/","text":"GTP-3 Playground Examples Here are the defaults: Jeff Hawkins Representation Quote Jeff Hawkins wrote a book on AI called \"On Intelligence\". Here is an example of trying to get his famous quote right. GPT-3 didn't get the right completion (representation), but it did get the main word in the book \"brain\". Prompt: Jeff Hawkins said that the key to artificial intelligence has always been the Completion: brain. His work on the neocortex shows how the neocortex has been optimized by the process of evolution. Instead of the artificial intelligence trying to mimic the brain, the brain is the best artificial intelligence. He said that the neocortex is a hierarchy, and that a hierarchy is a beautiful thing. It is very effective, and it is why our brains are so powerful. We are not just made up of a bunch of neurons. We are made up of different levels of the hierarchy. He said that the hierarchical architecture of the neocortex is based on the experience-driven process of evolution. The neocortex is more than just the outer layer of the brain. It is composed of six layers. The first layer is the input layer. It is where we take in all of our senses. The second layer is the sensory association cortex. It is where we begin to associate things that we see, hear, and feel. The third layer is the primary sensory cortex. It is where we begin to categorize things, and create concepts. The next layer is the upper sensory-motor cortex. It is where we begin to integrate things. The fourth layer is the parietal association cortex. It is where we begin to integrate information from the outside world, and from our internal model of the world. The fifth layer is the frontal cortex. It is where we begin to make decisions. The sixth layer is the motor cortex. It is where we send the signals to the body.","title":"GTP-3 Playground Examples"},{"location":"examples-01/#gtp-3-playground-examples","text":"Here are the defaults:","title":"GTP-3 Playground Examples"},{"location":"examples-01/#jeff-hawkins-representation-quote","text":"Jeff Hawkins wrote a book on AI called \"On Intelligence\". Here is an example of trying to get his famous quote right. GPT-3 didn't get the right completion (representation), but it did get the main word in the book \"brain\". Prompt: Jeff Hawkins said that the key to artificial intelligence has always been the Completion: brain. His work on the neocortex shows how the neocortex has been optimized by the process of evolution. Instead of the artificial intelligence trying to mimic the brain, the brain is the best artificial intelligence. He said that the neocortex is a hierarchy, and that a hierarchy is a beautiful thing. It is very effective, and it is why our brains are so powerful. We are not just made up of a bunch of neurons. We are made up of different levels of the hierarchy. He said that the hierarchical architecture of the neocortex is based on the experience-driven process of evolution. The neocortex is more than just the outer layer of the brain. It is composed of six layers. The first layer is the input layer. It is where we take in all of our senses. The second layer is the sensory association cortex. It is where we begin to associate things that we see, hear, and feel. The third layer is the primary sensory cortex. It is where we begin to categorize things, and create concepts. The next layer is the upper sensory-motor cortex. It is where we begin to integrate things. The fourth layer is the parietal association cortex. It is where we begin to integrate information from the outside world, and from our internal model of the world. The fifth layer is the frontal cortex. It is where we begin to make decisions. The sixth layer is the motor cortex. It is where we send the signals to the body.","title":"Jeff Hawkins Representation Quote"},{"location":"glossary/","text":"GPG-3 Glossary Artificial Intelligence The theory and development of computer systems able to perform tasks that normally require human intelligence, such as visual perception, speech recognition, natural language understanding, decision-making, and translation between languages. Also known as: AI Completion The text that the API generates based on the prompt Model Cutoff Date The model harvested data up to October 2019. It will not be aware of any events after the cutoff date. Prompt \u201cprompt\u201d is text input to the API Stochastic API is stochastic by default, meaning that every time you call it you might get a slightly different completion, even if the prompt stays the same. Temperature A number from 0.0 to 1.0 on the randomness of a completion. 0.0 values are consistent. 1.0 have high variability. Change the temperature up if you want more creative text generated. Tokens tokens","title":"Glossary"},{"location":"glossary/#gpg-3-glossary","text":"","title":"GPG-3 Glossary"},{"location":"glossary/#artificial-intelligence","text":"The theory and development of computer systems able to perform tasks that normally require human intelligence, such as visual perception, speech recognition, natural language understanding, decision-making, and translation between languages. Also known as: AI","title":"Artificial Intelligence"},{"location":"glossary/#completion","text":"The text that the API generates based on the prompt","title":"Completion"},{"location":"glossary/#model-cutoff-date","text":"The model harvested data up to October 2019. It will not be aware of any events after the cutoff date.","title":"Model Cutoff Date"},{"location":"glossary/#prompt","text":"\u201cprompt\u201d is text input to the API","title":"Prompt"},{"location":"glossary/#stochastic","text":"API is stochastic by default, meaning that every time you call it you might get a slightly different completion, even if the prompt stays the same.","title":"Stochastic"},{"location":"glossary/#temperature","text":"A number from 0.0 to 1.0 on the randomness of a completion. 0.0 values are consistent. 1.0 have high variability. Change the temperature up if you want more creative text generated.","title":"Temperature"},{"location":"glossary/#tokens","text":"tokens","title":"Tokens"},{"location":"lesson-plans/","text":"Lesson Plans The following is a list of software programming courses and the topics they teach Web: HTML, CSS, JavaScript Python: Conditionals, Loops, Variables, Scope, Functions, Function Parameters Java: Objects, Methods, Data Types, Encapsulation, Inheritance, Polymorphism Arduino: Physical Computing, Sensors, Setup, Loop, Interrupts Scratch: Course Outlines HTML: Bold, Italic, Lists, Tables, Div, Span, Ordered list, Unordered list CSS: Selectors, Padding, Borders, Margin, Block, Display, Color, Background, Layout Python: Conditionals, Loops, Variables, Scope, Functions, Function Parameters Java: Objects, Methods, Data Types, Encapsulation, Inheritance, Polymorphism Arduino: Physical Computing, Sensors, Setup, Loop, Interrupts Ruby: Programming Course Outlines HTML: Bold, Italic, Lists, Tables, Div, Span, Ordered list, Unordered list CSS: Selectors, Padding, Borders, Margin, Block, Display, Color, Background, Layout Python: Conditionals, Loops, Variables, Scope, Functions, Function Parameters Java: Objects, Methods, Data Types, Encapsulation, Inheritance, Polymorphism Arduino: Physical Computing, Sensors, Setup, Loop, Interrupts Groovy: Generated: Classes, Methods, Inheritance, Polymorphism, Closures C: Arrays, Pointers, Structures, Functions, Pointers, Arrays, Structures, Functions, Pointers, Arrays, Structures, Functions","title":"Lesson Plans"},{"location":"lesson-plans/#lesson-plans","text":"The following is a list of software programming courses and the topics they teach Web: HTML, CSS, JavaScript Python: Conditionals, Loops, Variables, Scope, Functions, Function Parameters Java: Objects, Methods, Data Types, Encapsulation, Inheritance, Polymorphism Arduino: Physical Computing, Sensors, Setup, Loop, Interrupts Scratch: Course Outlines HTML: Bold, Italic, Lists, Tables, Div, Span, Ordered list, Unordered list CSS: Selectors, Padding, Borders, Margin, Block, Display, Color, Background, Layout Python: Conditionals, Loops, Variables, Scope, Functions, Function Parameters Java: Objects, Methods, Data Types, Encapsulation, Inheritance, Polymorphism Arduino: Physical Computing, Sensors, Setup, Loop, Interrupts Ruby:","title":"Lesson Plans"},{"location":"lesson-plans/#programming-course-outlines","text":"HTML: Bold, Italic, Lists, Tables, Div, Span, Ordered list, Unordered list CSS: Selectors, Padding, Borders, Margin, Block, Display, Color, Background, Layout Python: Conditionals, Loops, Variables, Scope, Functions, Function Parameters Java: Objects, Methods, Data Types, Encapsulation, Inheritance, Polymorphism Arduino: Physical Computing, Sensors, Setup, Loop, Interrupts Groovy: Generated: Classes, Methods, Inheritance, Polymorphism, Closures C: Arrays, Pointers, Structures, Functions, Pointers, Arrays, Structures, Functions, Pointers, Arrays, Structures, Functions","title":"Programming Course Outlines"},{"location":"list-engines/","text":"List GPT-3 Engines 1 curl https://api.openai.com/v1/engines -H \"Authorization: Bearer $OPENAI_API_KEY \" { \"object\": \"list\", \"data\": [ { \"id\": \"ada\", \"object\": \"engine\", \"owner\": \"openai\", \"ready\": true }, { \"id\": \"babbage\", \"object\": \"engine\", \"owner\": \"openai\", \"ready\": true }, { \"id\": \"content-filter-alpha-c4\", \"object\": \"engine\", \"owner\": \"openai\", \"ready\": true }, { \"id\": \"content-filter-dev\", \"object\": \"engine\", \"owner\": \"openai\", \"ready\": true }, { \"id\": \"curie\", \"object\": \"engine\", \"owner\": \"openai\", \"ready\": true }, { \"id\": \"cursing-filter-v6\", \"object\": \"engine\", \"owner\": \"openai\", \"ready\": true }, { \"id\": \"davinci\", \"object\": \"engine\", \"owner\": \"openai\", \"ready\": true } ] } Getting a specific engine details GET https://api.openai.com/v1/engines/{engine_id} 1 curl https://api.openai.com/v1/engines/ada -H \"Authorization: Bearer $OPENAI_API_KEY \"","title":"List GPT-3 Engines"},{"location":"list-engines/#list-gpt-3-engines","text":"1 curl https://api.openai.com/v1/engines -H \"Authorization: Bearer $OPENAI_API_KEY \" { \"object\": \"list\", \"data\": [ { \"id\": \"ada\", \"object\": \"engine\", \"owner\": \"openai\", \"ready\": true }, { \"id\": \"babbage\", \"object\": \"engine\", \"owner\": \"openai\", \"ready\": true }, { \"id\": \"content-filter-alpha-c4\", \"object\": \"engine\", \"owner\": \"openai\", \"ready\": true }, { \"id\": \"content-filter-dev\", \"object\": \"engine\", \"owner\": \"openai\", \"ready\": true }, { \"id\": \"curie\", \"object\": \"engine\", \"owner\": \"openai\", \"ready\": true }, { \"id\": \"cursing-filter-v6\", \"object\": \"engine\", \"owner\": \"openai\", \"ready\": true }, { \"id\": \"davinci\", \"object\": \"engine\", \"owner\": \"openai\", \"ready\": true } ] }","title":"List GPT-3 Engines"},{"location":"list-engines/#getting-a-specific-engine-details","text":"GET https://api.openai.com/v1/engines/{engine_id} 1 curl https://api.openai.com/v1/engines/ada -H \"Authorization: Bearer $OPENAI_API_KEY \"","title":"Getting a specific engine details"},{"location":"references/","text":"References GPT-3 Paper on arxiv.org https://arxiv.org/abs/2005.14165 OpenAI Web Sites OpenAI Blog on the API https://beta.openai.com/ https://beta.openai.com/docs/introduction","title":"References"},{"location":"references/#references","text":"","title":"References"},{"location":"references/#gpt-3-paper-on-arxivorg","text":"https://arxiv.org/abs/2005.14165","title":"GPT-3 Paper on arxiv.org"},{"location":"references/#openai-web-sites","text":"OpenAI Blog on the API https://beta.openai.com/ https://beta.openai.com/docs/introduction","title":"OpenAI Web Sites"}]}